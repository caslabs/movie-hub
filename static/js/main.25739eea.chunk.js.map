{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeFeature","setState","title","changePodcast","changeReleases","changeChart","state","sidebarOpen","persons","onSetSidebarOpen","bind","assertThisInitialized","open","_this2","document","axios","get","then","res","data","message","rows","_this3","react_default","a","createElement","className","react_sidebar_esm","sidebar","onSetOpen","styles","background","id","onClick","changeDiscover","map","movie","movie_title","movie_genre","movie_year_released","src","movie_picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAuFeA,qBA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,cAAgB,WACdP,EAAKQ,SAAS,CAAEC,MAAO,UAXNT,EAcpBU,cAAgB,WACfV,EAAKQ,SAAS,CAAEC,MAAO,aAfJT,EAkBrBW,eAAiB,WACfX,EAAKQ,SAAS,CAAEC,MAAO,cAnBJT,EAsBrBY,YAAc,WACZZ,EAAKQ,SAAS,CAAEC,MAAO,YArBrBT,EAAKa,MAAQ,CACXC,aAAa,EACbL,MAAO,aACPM,QAAS,IAEXf,EAAKgB,iBAAmBhB,EAAKgB,iBAAiBC,KAAtBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAPPA,gFA2BFmB,GACfhB,KAAKK,SAAS,CAAEM,YAAaK,gDAGZ,IAAAC,EAAAjB,KACjBkB,SAASZ,MAAQ,YACjBa,IAAMC,IAAN,wEACCC,KAAK,SAAAC,GACJ,IAAMV,EAAUU,EAAIC,KAAKC,QAAQC,KACjCR,EAAKZ,SAAS,CAAEO,+CAGX,IAAAc,EAAA1B,KACP,OACE2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACFC,QAASL,EAAAC,EAAAC,cAAA,mCACTb,KAAMhB,KAAKU,MAAMC,YACjBsB,UAAWjC,KAAKa,iBAChBqB,OAAQ,CAAEF,QAAS,CAAEG,WAAY,WAE/BR,EAAAC,EAAAC,cAAA,OAAKO,GAAG,OACRT,EAAAC,EAAAC,cAAA,UAAQO,GAAG,iBAAiBC,QAAS,kBAAMX,EAAKb,kBAAiB,KAAjE,gBAGEc,EAAAC,EAAAC,cAAA,UAAQQ,QAASrC,KAAKI,cAAe0B,UAAU,gBAA/C,QACAH,EAAAC,EAAAC,cAAA,UAAQQ,QAASrC,KAAKO,cAAeuB,UAAU,gBAA/C,QACAH,EAAAC,EAAAC,cAAA,UAAQQ,QAASrC,KAAKS,YAAaqB,UAAU,gBAA7C,UACAH,EAAAC,EAAAC,cAAA,UAAQQ,QAASrC,KAAKQ,eAAgBsB,UAAU,gBAAhD,gBACAH,EAAAC,EAAAC,cAAA,UAAQQ,QAASrC,KAAKsC,eAAgBR,UAAU,gBAAhD,cAINH,EAAAC,EAAAC,cAAA,OAAKO,GAAG,aACJpC,KAAKU,MAAME,QAAQ2B,IAAI,SAAAC,GAAK,OAC9Bb,EAAAC,EAAAC,cAAA,OAAKO,GAAG,OACRT,EAAAC,EAAAC,cAAA,UAAKW,EAAMC,aACXd,EAAAC,EAAAC,cAAA,UAAKW,EAAME,aACXf,EAAAC,EAAAC,cAAA,UAAKW,EAAMG,oBAAX,KACAhB,EAAAC,EAAAC,cAAA,OAAKO,GAAG,QAAQQ,IAAKJ,EAAMK,6BApEjBC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.25739eea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Sidebar from \"react-sidebar\";\nimport axios from 'axios';\nimport './test.js'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sidebarOpen: false,\n      title: \"Click here\",\n      persons: []\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n  }\n\n  changeFeature = () => {\n    this.setState({ title: \"Post\" });\n };\n\n changePodcast = () => {\n  this.setState({ title: \"Podcast\" });\n};\n\nchangeReleases = () => {\n  this.setState({ title: \"Releases\" });\n};\n\nchangeChart = () => {\n  this.setState({ title: \"Charts\" });\n};\n\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n\n  componentDidMount(){\n    document.title = \"Movie Hub\"\n    axios.get(`https://bewc7jy4y8.execute-api.us-west-2.amazonaws.com/dev/JarJerLar`)\n    .then(res => {\n      const persons = res.data.message.rows;\n      this.setState({ persons });\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Sidebar\n        sidebar={<b>Sidebar Content Layout</b>}\n        open={this.state.sidebarOpen}\n        onSetOpen={this.onSetSidebarOpen}\n        styles={{ sidebar: { background: \"white\" } }}\n      >\n          <div id=\"oof\">\n          <button id=\"sideController\" onClick={() => this.onSetSidebarOpen(true)}>\n          Search Movie\n        </button>\n            <button onClick={this.changeFeature} className=\"buttonHeader\">POST</button>\n            <button onClick={this.changePodcast} className=\"buttonHeader\">EDIT</button>\n            <button onClick={this.changeChart} className=\"buttonHeader\">DELETE</button>\n            <button onClick={this.changeReleases} className=\"buttonHeader\">NEW RELEASES</button>\n            <button onClick={this.changeDiscover} className=\"buttonHeader\">DISCOVER</button>\n          </div>\n      </Sidebar>\n\n      <div id=\"container\">\n        { this.state.persons.map(movie => \n        <div id=\"box\"> \n        <h1>{movie.movie_title}</h1>\n        <h3>{movie.movie_genre}</h3>\n        <h2>{movie.movie_year_released} </h2>\n        <img id=\"movid\" src={movie.movie_picture} />\n        </div>)}\n        </div>\n        </header>\n      </div>\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}