{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderRedirect","state","redirect","react_default","a","createElement","Redirect","to","changeFeature","setState","title","changePodcast","changeReleases","changeChart","sidebarOpen","movies","onSetSidebarOpen","bind","assertThisInitialized","open","_this2","document","axios","get","then","res","data","message","rows","_this3","className","react_sidebar_esm","sidebar","id","onSubmit","handleSubmit","type","name","onChange","handleChange","onSetOpen","styles","background","onClick","href","map","movie","movie_title","movie_genre","movie_year_released","src","movie_picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2daad630.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Sidebar from \"react-sidebar\";\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios';\nimport './test.js'\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sidebarOpen: false,\n      title: \"\",\n      movies: [],\n      redirect: false\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n  }\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to='' />\n    }\n  }\n\n  changeFeature = () => {\n    this.setState({ title: \"Post\" });\n };\n\n changePodcast = () => {\n  this.setState({ title: \"Edit\" });\n};\n\nchangeReleases = () => {\n  this.setState({ title: \"Delete\" });\n};\n\nchangeChart = () => {\n  this.setState({ title: \"Delete\" });\n};\n\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n\n  componentDidMount(){\n    document.title = \"Movie Hub\"\n    axios.get(`https://bewc7jy4y8.execute-api.us-west-2.amazonaws.com/dev/JarJerLar`)\n    .then(res => {\n      const movies = res.data.message.rows;\n      this.setState({ movies });\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Sidebar\n        sidebar={\n          <div id=\"test\">\n            <b> Edit Form</b>\n          <form onSubmit={this.handleSubmit}>\n\n            <label>\n              Title:\n              <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n            </label>\n              <br></br>\n              Year:\n              <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n\n              <br></br>\n              Genre:\n              <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n\n              <br></br>\n              Picture:\n              <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n              <br></br>\n            <button type=\"submit\">Add</button>\n          </form>\n        </div>\n        }\n        open={this.state.sidebarOpen}\n        onSetOpen={this.onSetSidebarOpen}\n        styles={{ sidebar: { background: \"white\" } }}\n      >\n          <div id=\"oof\">\n          <button id=\"sideController\" onClick={() => this.onSetSidebarOpen(true)}>\n          Edit Movie\n        </button>\n        <a href=\"https://www.w3schools.com\"></a>\n            <button onClick={this.changeFeature} className=\"buttonHeader\">\n            POST</button>\n            <button onClick={this.changePodcast} className=\"buttonHeader\">EDIT</button>\n            <button onClick={this.changeChart} className=\"buttonHeader\">DELETE</button>\n          </div>\n      </Sidebar>\n      <div id=\"container\">\n        <div>{this.state.title}</div>\n        { this.state.movies.map(movie => \n        <div id=\"box\"> \n        <h1>{movie.movie_title}</h1>\n        <h3>{movie.movie_genre}</h3>\n        <h2>{movie.movie_year_released} </h2>\n        <img id=\"movid\" src={movie.movie_picture} />\n        </div>)}\n        </div>\n        </header>\n      </div>\n\n\n\n    );\n  }\n}\n\n/*\n\n\n\n\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}